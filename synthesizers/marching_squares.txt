SLIDER(grid_size, 1..32);
PHASOR(threshold, 0..1.0);
SLIDER(NOISE_SCALE 0..3);  // Balanced Perlin noise frequency
PHASOR(ANIMATION_SPEED);  // Drives smooth animation

// Linear interpolation for float values
float lerp(float a, float b, float t) {
    return a * (1.0 - t) + b * t;
}

// Linear interpolation for vec3 values
vec3 lerp(vec3 a, vec3 b, float t) {
    return a * (1.0 - t) + b * t;
}

// Compute fractional part manually
float fract(float x) {
    return x - floor(x);
}

// Fade function for Perlin noise
float fade(float t) {
    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
}

// Simple gradient function for Perlin noise
float grad(int hash, float x, float y) {
    int h = hash & 3;  
    float u = h < 2 ? x : y;
    float v = h < 2 ? y : x;
    return ((h & 1) ? -u : u) + ((h & 2) ? -2.0 * v : 2.0 * v);
}

// Perlin noise function with proper time animation
float perlin(float x, float y) {
    x *= NOISE_SCALE;
    y *= NOISE_SCALE;

    // Use `PHASOR(ANIMATION_SPEED)` to animate smoothly
    float timeOffset = ANIMATION_SPEED * 10;  

    int xi = int(floor(x)) & 255;
    int yi = int(floor(y)) & 255;
    float xf = fract(x);
    float yf = fract(y);

    float u = fade(xf);
    float v = fade(yf);

    int aa = xi + yi + int(timeOffset);
    int ab = xi + yi + 1 + int(timeOffset);
    int ba = xi + 1 + yi + int(timeOffset);
    int bb = xi + 1 + yi + 1 + int(timeOffset);

    float gradAA = grad(aa, xf, yf);
    float gradAB = grad(ab, xf, yf - 1);
    float gradBA = grad(ba, xf - 1, yf);
    float gradBB = grad(bb, xf - 1, yf - 1);

    float x1 = lerp(gradAA, gradBA, u);
    float x2 = lerp(gradAB, gradBB, u);
    return lerp(x1, x2, v);
}

// Generate contour points using Marching Squares
vec3 marchingSquares(float t) {
    int N = max(int(grid_size), 1);
    float step = 2.0 / float(N);
    int totalCells = N * N;

    int idx = min(int(t * totalCells), totalCells - 1);
    int ix = idx % N;
    int iy = idx / N;

    float x0 = -1.0 + ix * step;
    float y0 = -1.0 + iy * step;

    // Apply animated Perlin noise
    float v0 = (perlin(x0, y0) + 1.0) * 0.5;
    float v1 = (perlin(x0 + step, y0) + 1.0) * 0.5;
    float v2 = (perlin(x0 + step, y0 + step) + 1.0) * 0.5;
    float v3 = (perlin(x0, y0 + step) + 1.0) * 0.5;

    // Compute Marching Squares case index
    int caseIndex = (v0 > threshold) * 1 +
                    (v1 > threshold) * 2 +
                    (v2 > threshold) * 4 +
                    (v3 > threshold) * 8;

    // Lookup table for valid edges
    int edgeTable[16] = {
        0x0, 0x9, 0x3, 0xA, 0x6, 0xF, 0x5, 0xC,
        0xC, 0x5, 0xF, 0x6, 0xA, 0x3, 0x9, 0x0
    };
    int edges = edgeTable[caseIndex];

    // Compute line segment points based on case
    vec3 p1 = vec3(x0, y0, 0);
    vec3 p2 = vec3(x0 + step, y0 + step, 0);

    if (edges & 1)  p1 = vec3((x0 + x0 + step) * 0.5, y0, 0);
    if (edges & 2)  p2 = vec3(x0 + step, (y0 + y0 + step) * 0.5, 0);
    if (edges & 4)  p1 = vec3((x0 + x0 + step) * 0.5, y0 + step, 0);
    if (edges & 8)  p2 = vec3(x0, (y0 + y0 + step) * 0.5, 0);

    // If no valid edges, keep the last position but lift the pen
    if (edges == 0) {
        return vec3(p1.x, p1.y, -1);  // Stay near last valid point
    }

    // Interpolate smoothly
    float interp = fract(t * totalCells);
    return lerp(p1, p2, interp);
}

// Generate animated waveform for oscilloscope
vec3 gen(float t) {
    return marchingSquares(t);
}
