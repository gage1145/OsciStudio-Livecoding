SLIDER(n_max, 2..100);    // Maximum starting number
SLIDER(length, 0.01..0.1); // Step size per iteration
SLIDER(turn_factor, 0.01..1.0);  // Controls turn sharpness
SLIDER(angle1, 1..100);
SLIDER(angle2, 1..100);

// Collatz function: returns next value in the sequence
int collatz(int x) {
    return (x % 2) ? (x * 3 + 1) : x / 2;
}

// Persistent state variables
static vec3 prev = vec3(0, 0, 0);
static int current = 2;
static float angle = 0.0;
static bool newSequence = true;
static float last_t = 0;  // Track time progress

vec3 gen(float t) {
    int n = int(n_max);  // Convert slider to integer range

    // Reset if t moves forward significantly (prevents instability)
    if (t - last_t > 0.1) {
        current = 2;  // Reset sequence
        prev = vec3(0, 0, 0);
        angle = 0.0;
        newSequence = true;
        last_t = t;
    }

    // Start a new sequence if needed
    if (newSequence) {
        current = 2 + int(t * (n - 2));  // Pick a new starting number
        prev = vec3(t * 2.0 - 1.0, 0, 0);  // Spread out starting positions
        newSequence = false;
    }

    // Generate the next step in the Collatz sequence
    if (current != 1) {
        int next = collatz(current);

        // Use a more pronounced turn factor for better variation
        float turn_angle = turn_factor * (next % 2 ? PI / angle1 : -PI / angle2);

        // Update angle and compute new position
        angle += turn_angle;
        vec3 v;
        v.x = prev.x + length * cos(angle);
        v.y = prev.y + length * sin(angle);
        //v.z = 0;  // Keep in 2D

        // Store previous position and update sequence
        prev = v;
        current = next;

        return v;
    } else {
        // Sequence finished, prepare for new one
        newSequence = true;
        return prev;  // Hold last position until a new sequence starts
    }
}
